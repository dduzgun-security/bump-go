name: 'bump-go'
description: 'Auto-bumps Go version to the latest available major version and updates stdlibs'
author: 'dduzgun-security'

inputs:
  go_version:
    description: |
      Current Go version. 
      The value can be a specific version (eg: 1.22.3) or a file containing the version (eg: .go-version).
      Default '.go-version'
    default: '.go-version'
    required: true
  github_token:
    description: 'GITHUB_TOKEN with contents:write and pull-requests:write permissions'
    default: '${{ github.token }}'
    required: true
  pr_reviewer:
    description: 'Reviewer for the PR'
    required: true

runs:
  using: 'composite'
  steps:
    - name: 'Determine Go toolchain version'
      id: get-go-version
      shell: bash
      env:
        INPUT_GO_VERSION: ${{ inputs.go_version }}
      run: |
        if [[ -f "${INPUT_GO_VERSION}" ]]; then
          GO_VERSION=$(head -n 1 "${INPUT_GO_VERSION}")
        elif [[ "${INPUT_GO_VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          GO_VERSION="${INPUT_GO_VERSION}"
        else
          echo "Invalid input: ${INPUT_GO_VERSION}"
          exit 1
        fi

        if [[ ! $GO_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid Go version: $GO_VERSION"
          exit 1
        fi

        echo "Building with Go ${GO_VERSION}"
        echo "go-version=${GO_VERSION}" >> "${GITHUB_OUTPUT}"
        GO_MAJOR_VERSION=${GO_VERSION%.*}
        echo "go-major-version=${GO_MAJOR_VERSION}" >> "${GITHUB_OUTPUT}"
        GO_MAJOR_VERSION_PREVIOUS="${GO_MAJOR_VERSION%.*}.$((${GO_MAJOR_VERSION#*.}-1))"
        echo "Previous version: ${GO_MAJOR_VERSION_PREVIOUS}"

    - name: 'Check if Go version is a stable release'
      id: check-stable
      shell: bash
      run: |
        GO_VERSION=${{ steps.get-go-version.outputs.go-version }}
        GO_MAJOR_VERSION=${{ steps.get-go-version.outputs.go-major-version }}
        versions=$(curl -s 'https://api.github.com/repos/golang/go/git/refs/tags' | jq -r '.[].ref' | grep -o 'refs/tags/go[0-9\.]*' | grep -E 'go[0-9]+\.[0-9]+\.[1-9][0-9]*$' | sed 's_refs/tags/__')
        latest_versions=$(echo "$versions" | grep -o 'go[0-9]\+\.[0-9]\+' | sed 's/go//' | sort -uV | tail -2)
        
        stable=false
        needs_bump=false
        for version in $latest_versions; do
          echo "$versions" | grep "$version"
          if [ "$version" = "$GO_MAJOR_VERSION" ]; then
            echo "$GO_VERSION is a minor release of $GO_MAJOR_VERSION"
            stable=true
            echo "stable=${stable}" >> "${GITHUB_OUTPUT}"
            break
          fi
        done
        if [ "$stable" = "false" ]; then
          echo "$GO_VERSION is NOT a minor release of $GO_MAJOR_VERSION"
          exit 1
        fi

        latest_patch_version=$(echo "$versions" | grep "$GO_MAJOR_VERSION"| sed 's/go//' | sort -V | tail -1)
        if [ "$latest_patch_version" != "$GO_VERSION" ]; then
          echo "$GO_VERSION can be bumped to $latest_patch_version"
          needs_bump=true
          echo "needs-bump=${needs_bump}" >> "${GITHUB_OUTPUT}"
          echo "latest-patch-version=${latest_patch_version}" >> "${GITHUB_OUTPUT}"
        fi

    - name: 'Push changes to bump go version and stdlibs'
      id: git-push-changes
      shell: bash
      if: steps.check-stable.outputs.stable == 'true' && steps.check-stable.outputs.needs-bump == 'true'
      run: |
        echo "Starting to push changes to bump go version and sdlibs"
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"  

        BRANCH_NAME="bump-go/${{ steps.check-stable.outputs.latest-patch-version }}"
        echo "branch-name=${BRANCH_NAME}" >> "${GITHUB_OUTPUT}"

        git fetch
        if git show-ref --quiet refs/remotes/origin/$BRANCH_NAME; then
          echo "Branch already exists, please review the existing PR."
          exit 1
        fi
        git checkout -b "$BRANCH_NAME"

        echo "${{ steps.check-stable.outputs.latest-patch-version }}" > .go-version

        find . -name go.mod -execdir sh -c 'awk "/golang.org\/x/ {print \$1}" go.mod | grep "golang.org/x" | while read -r line; do go get $line@latest; done' \;

        find . -name go.mod -execdir go mod tidy \;

        git add .
        git commit -m "build(deps): bump go version to ${{ steps.check-stable.outputs.latest-patch-version }}"
        git push origin "$BRANCH_NAME"

    - name: 'Create PR to bump go version and stdlibs'
      shell: bash
      if: steps.check-stable.outputs.stable == 'true' && steps.check-stable.outputs.needs-bump == 'true'
      env:
        INPUT_REVIEWER: ${{ inputs.pr_reviewer }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        BRANCH_NAME=${{ steps.git-push-changes.outputs.branch-name }}
        gh pr create --base main --head "$BRANCH_NAME" --title "[bump-go] Bump go version to ${{ steps.check-stable.outputs.latest-patch-version }}" --body 'Bump go version to [${{ steps.check-stable.outputs.latest-patch-version }}](https://go.dev/doc/devel/release#go${{ steps.get-go-version.outputs.go-major-version }}.minor)' --reviewer "${INPUT_REVIEWER}"
        echo "Created PR to bump go version and stdlibs"
